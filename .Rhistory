?norm
help.search("rnorm")
args("rnorm")
a<-available.packages()
nrow(a)
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
might(a)
might
x<-1
x <- 2
z <- 99:43
z
w <- 3:14.5
w
inf
Inf
exp (Inf)
exp(-Inf)
Inf - Inf
Inf +  Inf
Inf / Inf
0/0
y <- c(1.7,"a")
y <- c(TRUE,2)
y <- c(FALSE, 2L, 5, 5+4i) #Complex
y
# Listas
x <- list(1, "a", TRUE, 3 + 2i, 5L)
x <- list(1, "a", TRUE, 3 + 2i, 5L)
#Todos los elementos de una lista mantiene la clase original
# Listas
x <- list(1, "a", TRUE, 3 + 2i, 5L)
# Listas
x <- list(1, "a", TRUE, 3 + 2i, 5L, 1:50)
#coercion forzada
x <- 0:6             #integer
x
x <- list(1, "a", TRUE, 3 + 2i, 5L, 1:50)
x
m <- matrix(nrow = 2, ncol=3)
m
dim(m)
#Como llenar una matriz
m <- matrix( data=1:6, nrow=2, ncol=3)
m <- matrix( data=1:6, nrow=2, ncol=3)
m
m <- matrix (1:6, 2, 3)
m
m <- matrix(data=1:6, nrow=2, ncol=3, byrow= TRUE)
m
m <- matrix(1:6, 2, 3, T)
m
m <- 1:10
m
m <- 1:10
m
dim(m) <- c(2,5)
m
#cbind, une columnas
cbind(x,y)
cbind(x,y)
rbind(x,y)
# otra forma de crear una matriz es uniendo diferentes vectores
x <- 1:3
y <- 10:12
#cbind, une columnas
cbind(x,y)
#rbind, une filas
rbind(x,y)
x <- factor (c("si", "si", "no", "no", "si"))
x
x <- factor(c("azul", "verde", "verde", "azul", "rojo"))
x
table(x)
unclass(x)
?factor
x <- factor(c("azul", "verde", "verde", "azul", "rojo")), levels= c("rojo","amarillo", "verde","naranja")
x
x <- factor(c("azul", "verde", "verde", "azul", "rojo")), levels= c("rojo","amarillo", "verde","naranja")
x
x <-factor(c("azul", "verde", "verde", "azul", "rojo")), levels= c("rojo","amarillo", "verde","naranja")
x
x <-factor(c("Azul", "Verde", "Verde", "Azul", "Rojo")), levels= c("Rojo","Amarillo", "Verde","Naranja")
x
unclass(x)
unclass(x)
x <-factor(c("Azul", "Verde", "Verde", "Azul", "Rojo")), levels= c("Rojo","Amarillo", "Verde","Naranja")
x
xx <-factor(c("Azul", "Verde", "Verde", "Azul", "Rojo")), levels= c("Rojo","Amarillo", "Verde","Naranja")
xx
xx <-factor(c("Azul", "Verde", "Verde", "Azul", "Rojo")), levels= c("Rojo","Amarillo", "Verde","Naranja")
xx
xx <- factor(c("azul", "verde", "verde", "azul", "rojo"))
x
x <-factor(c("Azul", "Verde", "Verde", "Azul", "Rojo")), levels= c("Rojo","Amarillo", "Verde","Naranja")
x
x <- c(1,2,NA,10,3)
is.na(x)
is nan(x)
x <- c(1,2,NA,10,3)
is.na(x)
is nan(x)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NA,10,3)
is.na(x)        #valor faltante detectado
is.nan(x)       #valor no numerico que no es faltante
y <- c(1,2,NA,10,3)
is.na(y)        #valor faltante detectado
is.nan(y)       #valor no numerico que no es faltante
x <- data.frame (foo = 1:4, bar= c(T,T,F,F))
X
x <- data.frame(foo = 1:4, bar= c(T,T,F,F))
X
x <- data.frame(foo = 1:4, bar= c(T,T,F,F))
X
x <- data.frame(foo = 1:4,bar= c(T,T,F,F))
x
nrow(x)
ncol(x)
m <- matrix(1:4 , nrow=2 , ncol=2)
dimnames(m) <- list (c("a" , "b"), c("c", "d"))
m
m <- matrix(1:4 , nrow=2 , ncol=2)
m
read.table()
read.table
?read.table
y <- data.frame(a-1, b = "a" )
y
y <- data.frame(a=1, b = "a" )
y
dput(y)
dput(y)
set.seed(1) #semillas
z <- 5
x <- vector ("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
set.seed(1) #semillas
z <- 5
x <- vector ("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print (x)
z <- 5
contador <- 0
while (z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos")
set.seed(1) #semillas
z <- 5
x <- vector ("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print (x)
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")
z <- 5
x <- vector("numeric")
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
contador <- 0
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
z <- 5
x <- vector("numeric")
contador <- 0
#for (i in )
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
contador <- 0
no1 <- 0
no2 <- 0
tries <- 100
for (i in 1:tries){
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
plot (x, type ="b")   #Para graficar y que los puntos esten unidos
if (z<3){
no1 <- no1 + 1
} else if(z> 10){
no2 <- no2 + 1
}
}
contador <- 0
no1 <- 0
no2 <- 0
tries <- 10
for (i in 1:tries){
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
#print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
#plot (x, type ="b")   #Para graficar y que los puntos esten unidos
if (z<3){
no1 <- no1 + 1
} else if(z> 10){
no2 <- no2 + 1
}
}
paste("En", tries, " inrentos, se escapa", no1, " veces por abajo y", no2 " veces por arriba")
paste("La probabilidad de salir por abajo es ", no1/tries)
paste("En", tries, " intentos, se escapa", no1 , " veces por abajo y", no2 " veces por arriba")
paste("La probabilidad de salir por abajo es ", no1/tries)
f <- paste("En", tries, " intentos, se escapa", no1 , " veces por abajo y", no2 " veces por arriba")
f
paste("La probabilidad de salir por abajo es ", no1/tries)
contador <- 0
no1 <- 0
no2 <- 0
tries <- 10
for (i in 1:tries){
z <- 5
x <- vector("numeric")
while (z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)  #Numero de aciertos en una cantidad de intentos
x <- c(x,z)
if (moneda == 1){   #Caminata aleatoria
z <- z+1
} else {
z <- z-1
}
contador <- contador + 1
}
#print("Se realizaron"); print(contador) ; print ("pasos"); print (x)
#plot (x, type ="b")   #Para graficar y que los puntos esten unidos
if (z<3){
no1 <- no1 + 1
} else if(z> 10){
no2 <- no2 + 1
}
}
paste("En", tries ," intentos, se escapa", no1 ," veces por abajo y", no2 ," veces por arriba")
paste("La probabilidad de salir por abajo es ", no1/tries)
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
setwd("~/GitHub/Programacion_Actuarial_lll")
lapply
x <- list(a=1 : 5, b=rnorm(10000))
lapply(x , mean)
x <- list(a=1 : 5, b=rnorm(10000))
lapply(x , mean)
x
lapply(x , mean)
x <- list( a=1:5, b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x,mean)
x <- 1:4
lapply(x, runif)  # runif de 1 genera un numero aleatorio, runif de 2 genera dos numeros aleatorios y asi sucesivamente
x <- 1:4
lapply(x, runif, max=15, min=5)
x <- list( a=1:5, b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
lapply(x,mean)
sapply(x, mean)
str(apply)
x <- matrix(rnorm(200), 20,10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20,10)
apply(x, 2, mean)
apply(x, 1, sum)
?quantile
a <- array(rnorm (2*2*10), c(2,2,10))
apply(a,c(1,2),mean)
rowmeans(a, dims=2)
a <- array(rnorm (2*2*10), c(2,2,10))
apply(a,c(1,2),mean)
rowmeans(a, dims=2)
rowMeans(a, dims=2)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
m <- matrix( data=1:6, nrow=2, ncol=3)
m
m <- matrix(1:6, 2, 3, T)
m
dim(m) <- c(2,5)
m
cbind(x,y)
x <- factor(c("azul", "verde", "verde", "azul", "rojo"))
x
table(x)
x <- c(1,2,NA,10,3)
is.na(x)        #valor faltante detectado
is.nan(x)
